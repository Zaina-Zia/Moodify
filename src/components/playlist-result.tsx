"use client"

import { motion, AnimatePresence } from "framer-motion"
import Image from "next/image"
import { Button } from "@/components/ui/button"
import type { Track } from "@/lib/playlist"
import * as React from "react"

export function PlaylistResult({
  tracks,
  onBack,
}: {
  tracks: Track[]
  onBack: () => void
}) {
  const [saving, setSaving] = React.useState(false)

  const onSaveToSpotify = async () => {
    if (saving) return
    const ok = typeof window !== "undefined" ? window.confirm("Add this playlist to your Spotify account?") : true
    if (!ok) return
    try {
      setSaving(true)
      const res = await fetch("/api/savePlaylist", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          name: `Moodify Playlist ${new Date().toLocaleDateString()}`,
          description: "Generated by Moodify",
          tracks: tracks.map((t) => ({ title: t.title, artist: t.artist })),
          isPublic: true,
        }),
      })
      const data = await res.json()
      if (data?.ok && data.playlistUrl) {
        if (typeof window !== "undefined") {
          window.open(data.playlistUrl as string, "_blank")
          alert("Playlist saved to your Spotify account.")
        }
      } else {
        const msg = data?.error || "Failed to save playlist"
        if (typeof window !== "undefined") alert(msg)
      }
    } catch {
      if (typeof window !== "undefined") alert("Something went wrong while saving the playlist.")
    } finally {
      setSaving(false)
    }
  }

  return (
    <div className="mt-8 sm:mt-10 md:mt-12">
      <div className="mb-6 flex flex-col gap-3 sm:mb-8 sm:flex-row sm:items-center sm:justify-between">
        <div>
          <h2 className="text-2xl font-bold text-[hsl(var(--foreground))] sm:text-3xl">Your personalized playlist</h2>
          <p className="mt-1 text-sm text-[hsl(var(--muted-foreground))]">Curated just for your mood</p>
        </div>
        <div className="flex w-full sm:w-auto gap-2">
          <Button
            variant="outline"
            onClick={onBack}
            className="flex-1 sm:flex-none text-white border-primary/30 hover:border-primary/60 hover:bg-primary/10 bg-transparent"
          >
            Try another mood
          </Button>
          <Button
            onClick={onSaveToSpotify}
            disabled={saving}
            className="flex-1 sm:flex-none h-9 text-xs bg-[#1DB954] hover:opacity-90"
          >
            {saving ? "Saving…" : "Save to Spotify"}
          </Button>
        </div>
      </div>
      <AnimatePresence mode="wait">
        <motion.ul
          layout
          initial={{ opacity: 0, y: 8 }}
          animate={{ opacity: 1, y: 0 }}
          exit={{ opacity: 0, y: -8 }}
          transition={{ duration: 0.25 }}
          className="grid grid-cols-1 gap-4 sm:gap-5 md:grid-cols-2 lg:grid-cols-3"
        >
          {tracks.map((t, i) => (
            <motion.li
              key={`${t.title}-${i}`}
              initial={{ opacity: 0, y: 8 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.25, delay: i * 0.08 }}
              className="group overflow-hidden rounded-2xl border border-[hsl(var(--border))] bg-gradient-to-br from-[hsl(var(--card))] to-[hsl(var(--card))]/80 shadow-lg transition-all duration-300 hover:border-[hsl(var(--primary))]/50 hover:shadow-2xl hover:shadow-[hsl(var(--primary))]/10"
            >
              <div className="p-4 sm:p-5">
                {/* Album Art */}
                <div className="mb-4 overflow-hidden rounded-xl ring-2 ring-[hsl(var(--primary))]/20 transition-all duration-300 group-hover:ring-[hsl(var(--primary))]/40">
                  <Image
                    src={t.cover || "/placeholder.svg"}
                    alt={t.title}
                    width={200}
                    height={200}
                    className="h-32 w-full object-cover sm:h-40 transition-transform duration-300 group-hover:scale-105"
                    unoptimized
                  />
                </div>

                {/* Song Info */}
                <div className="mb-4">
                  <p className="line-clamp-2 text-sm font-bold text-[hsl(var(--foreground))] sm:text-base">{t.title}</p>
                  <p className="mt-1 line-clamp-1 text-xs text-[hsl(var(--muted-foreground))] sm:text-sm">{t.artist}</p>
                </div>

                {/* Preview Control */}
                <PreviewControl url={t.previewUrl ?? undefined} durationMs={t.durationMs} />
              </div>
            </motion.li>
          ))}
        </motion.ul>
      </AnimatePresence>
    </div>
  )
}

function PreviewControl({ url, durationMs }: { url?: string; durationMs?: number }) {
  const audioRef = React.useRef<HTMLAudioElement | null>(null)
  const [playing, setPlaying] = React.useState(false)
  const [progress, setProgress] = React.useState(0)
  const totalMs = typeof durationMs === "number" && durationMs > 0 ? durationMs : undefined

  React.useEffect(() => {
    return () => {
      audioRef.current?.pause()
    }
  }, [])

  if (!url) {
    return (
      <div>
        <Button variant="outline" disabled className="w-full h-9 text-xs bg-transparent">
          No preview available
        </Button>
      </div>
    )
  }

  const onToggle = async () => {
    const el = audioRef.current
    if (!el) return
    if (playing) {
      el.pause()
      setPlaying(false)
    } else {
      try {
        await el.play()
        setPlaying(true)
      } catch {
        // ignore autoplay restrictions errors
      }
    }
  }

  return (
    <div>
      <Button
        onClick={onToggle}
        className="w-full h-9 text-xs bg-gradient-to-r from-[hsl(var(--primary))] to-[hsl(var(--secondary))] hover:opacity-90 transition-opacity"
      >
        {playing ? "⏸ Pause Preview" : "▶ Play Preview"}
      </Button>

      <div className="mt-3 space-y-2">
        <div className="h-2 w-full overflow-hidden rounded-full bg-[hsl(var(--muted))]">
          <div
            className="h-full bg-gradient-to-r from-[hsl(var(--primary))] via-[hsl(var(--secondary))] to-[hsl(var(--primary))]"
            style={{ width: `${Math.max(0, Math.min(1, progress)) * 100}%` }}
          />
        </div>
        {typeof totalMs === "number" ? (
          <p className="text-xs text-[hsl(var(--muted-foreground))] text-center">{formatMs(totalMs)}</p>
        ) : null}
      </div>

      <audio
        ref={audioRef}
        src={url}
        preload="metadata"
        controlsList="nodownload noplaybackrate"
        onEnded={() => {
          setPlaying(false)
          setProgress(0)
        }}
        onTimeUpdate={(e) => {
          const el = e.currentTarget
          const d = el.duration || (totalMs ? totalMs / 1000 : 0)
          if (d > 0) setProgress(el.currentTime / d)
        }}
      />
    </div>
  )
}

function formatMs(ms: number) {
  const totalSec = Math.round(ms / 1000)
  const mm = Math.floor(totalSec / 60)
  const ss = totalSec % 60
  return `${mm}:${ss.toString().padStart(2, "0")}`
}

export function LoadingPlaylist({ count = 4 }: { count?: number }) {
  return (
    <div className="mt-8 sm:mt-10 md:mt-12">
      <p className="mb-6 text-xs font-medium text-[hsl(var(--muted-foreground))] sm:mb-8 sm:text-sm">
        Tuning your vibe…
      </p>
      <ul className="grid grid-cols-1 gap-4 sm:gap-5 md:grid-cols-2 lg:grid-cols-3">
        {Array.from({ length: count }).map((_, i) => (
          <li
            key={i}
            className="rounded-2xl border border-[hsl(var(--border))] bg-[hsl(var(--card))] p-4 shadow-lg sm:p-5"
          >
            <div className="mb-4 h-32 w-full animate-pulse rounded-xl bg-[hsl(var(--muted))] sm:h-40" />
            <div className="space-y-2">
              <div className="h-4 w-3/4 animate-pulse rounded bg-[hsl(var(--muted))]" />
              <div className="h-3 w-1/2 animate-pulse rounded bg-[hsl(var(--muted))]" />
            </div>
          </li>
        ))}
      </ul>
    </div>
  )
}
